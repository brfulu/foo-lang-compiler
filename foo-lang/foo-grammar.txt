<program>                   : <declarations>

<declarations>              : (<import_library> | <function_declaration> | <var_declaration)*

<import_library>            : import <apostrophe> <id> <apostrophe> <semicolon>

<function_declaration>      : func <dot> <function_name> <dot> <function_params> <dot> <function_returns> <dot> <body>

<function_name>             : name <lparen> <id> <rparen>

<function_params>           : params <lparen> <parameters> <rparen>

<function_returns>          : returns <lparen> <type> <rparen>

<body>                      : body <lparen> <statement_list> <rparen>

<var_declaration>           : <type> <variable> <var_initialization> <semicolon>

<var_initialization>        : (<assign> <expr>)?

<parameters>                : <empty>
                            | <param> (<comma> <param>)*

<param>                     : <type> <variable>

<statement_list>            : <statement> <statement_list>
                            | <empty>

<statement>                 : <var_declaration>
                            | <assignment_statement>
                            | <function_call>
                            | <if_statement>
                            | <return_statement>

<assignment_statement>      : <variable> <assign> <expr> <semicolon>

<variable>                  : <id>

<return_statement>          : return <expr> <SEMICOLON>

<if_statement>              : if <dot> <condition> <dot> then (<dot> <else>)?

<condition>                 : cond <lparen> <expr> <rparen>

<then>                      : then <lparen> <statement_list> <rparen>

<else>                      : else <lparen> <statement_list> <rparen>

<expr>                      : <term> ((<plus> | <minus>) <term>)*

<term>                      : <factor> ((<mul> | <div>) <factor>)*

<factor>                    : <plus> <factor>
                            | <minus> <factor>
                            | <ampersand> <variable>
                            | <plus> <plus> <variable>
                            | <minus minus> <variable>
                            | <number>
                            | <boolean>
                            | <string>
                            | <lparen> <expr> <rparen<
                            | <variable>
                            | <function_call>

<function_call>             : <id> <dot> call <lparen> <arguments>(<expr>)* <rparen> <semicolon>

<arguments>                 : <empty>
                            | <expr> (<comma> <expr>)*

<loop>                      : loop <dot> <loop_init> <dot> <condition> <dot> <loop_step> <dot> <body>

<loop_init>                 : init <lparen> <var_declaration> <rparen>

<loop_step>                 : step <lparen> <statement_list> <rparen>

<apostrophe>                : '

<semicolon>                 : ;

<dot>                       : .

<assign>                    : :=

<coma>                      : ,

<type>                      : num
                            | str
                            | bool
                            | list

<plus>                      : +

<minus>                     : -

<mul>                       : *

<div>                       : /

<number>                    : <int_number>
                            | <float_number>

<int_number>                : <sign> <digit> (<digit>)*

<digit>                     : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<float_number>              : <int_number> (<dot> <digit> (<digit>)*)?

<sign>                      : empty
                            | <plus>
                            | <minus>

<string>                    : <apostrophe> (<char>)* <apostrophe>

<char>                      : a | b | c | ... | z | A | B | C | ... | Z | . | , | ! | ? | : | ...

<boolean>                   : true
                            | false

<empty>                     :

