<program>               : <decls>

<decls>                 : (<import_library> | <func_decl> | <var_decl> | <stmt_list>)*

<import_library>        : import <apostrophe> <id> <apostrophe> <semicolon>

<func_decl>             : func <dot> <func_name> <dot> <func_params> <dot> <func_returns> <dot> <body>

<func_name>             : name <lparen> <id> <rparen>

<func_params>           : params <lparen> <parameters> <rparen>

<func_returns>          : returns <lparen> <type> <rparen>

<body>                  : body <lparen> <stmt_list> <rparen>

<var_decl>              : <type> <var> <var_init> <semicolon>

<var_init>              : (<assign> <expr>)?

<parameters>            : <empty>
                        | <param> (<comma> <param>)*

<param>                 : <type> <var>

<stmt_list >            : <stmt> <stmt_list>
                        | <empty>

<stmt>                  : <var_decl>
                        | <assignment_stmt>
                        | <aug_assignment_stmt>
                        | <list_access>
                        | <func_call>
                        | <if_stmt>
                        | <loop>
                        | <return_stmt>

<assignment_stmt>       : <var> <assign> <expr> <semicolon>

<aug_assignment_stmt>   : <var> <aug_op> <expr> <semicolon>

<aug_op>                : (<plus> | <minus> | <mul> | <div> | <mod>) <assign>

<list_access>           : <var> <l_square_bracket> <whole_number> <r_square_bracket>

<var>                   : <id>

<return_stmt>           : return <expr> <semicolon>

<if_stmt>               : if <dot> <condition> <dot> then (<dot> <else>)?

<condition>             : cond <lparen> <expr> <rparen>

<then>                  : then <lparen> <stmt_list> <rparen>

<else>                  : else <lparen> <stmt_list> <rparen>

<expr>                  : <term> ((<plus> | <minus>) <term>)*

<term>                  : <factor> ((<mul> | <div>) <factor>)*

<factor>                : <plus> <factor>
                        | <minus> <factor>
                        | <ampersand> <var>
                        | <plus> <plus> <var>
                        | <minus minus> <var>
                        | <number>
                        | <boolean>
                        | <string>
                        | <lparen> <expr> <rparen>
                        | <var>
                        | <func_call>

<func_call>             : <id> <dot> call <lparen> <arguments>(<expr>)* <rparen> <semicolon>

<arguments>             : <empty>
                        | <expr> (<comma> <expr>)*

<loop>                  : loop <dot> <loop_init> <dot> <condition> <dot> <loop_step> <dot> <body>

<loop_init>             : init <lparen> <var_decl> <rparen>

<loop_step>             : step <lparen> <stmt_list> <rparen>


<apostrophe>            : '

<semicolon>             : ;

<dot>                   : .

<assign>                : :=

<coma>                  : ,

<type>                  : num
                        | str
                        | bool
                        | list

<plus>                  : +

<minus>                 : -

<mul>                   : *

<div>                   : /

<mod>                   : %

<number>                : <int_number>
                        | <float_number>

<int_number>            : <sign> <whole_number>

<whole_number>          : <digit> (<digit>)*

<digit>                 : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<float_number>          : <int_number> (<dot> <whole_number>)?

<sign>                  : empty
                        | <plus>
                        | <minus>

<string>                : <apostrophe> (<char>)* <apostrophe>

<char>                  : a | b | c | ... | z | A | B | C | ... | Z | . | , | ! | ? | : | ...

<boolean>               : true
                        | false

<l_square_bracket>          : [

<r_square_bracket>          : ]

<empty>                     :

