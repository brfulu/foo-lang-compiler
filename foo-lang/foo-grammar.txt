// Uvod
-Startni simbol je <program>
-Terminali se pisu malim slovima bez zagrada
-Neterminali se pisu malim slovima izmedju < i >


// Produkcije

<program>               : <declarations>

<declarations>          : (<library_import> | <func_declaration> | <stmt_list>)*

<library_import>        : import <apostrophe> <id> <apostrophe> <semicolon>

<func_declaration>      : func <dot> <func_name> <dot> <func_params> <dot> <func_returns> <dot> <body> <semicolon>

<func_name>             : name <lparen> <apostrophe> <id> <apostrophe> <rparen>

<func_params>           : params <lparen> <parameters> <rparen>

<func_returns>          : returns <lparen> <type> <rparen>

<body>                  : body <lparen> <stmt_list> <rparen>

<var_declaration>       : <type> <var> <var_init> <semicolon>

<var_init>              : (<assign> (<expr>)?

<parameters>            : <empty>
                        | <param> (<comma> <param>)*

<param>                 : <type> <var>

<stmt_list>             : <stmt> <stmt_list>
                        | <empty>

<stmt>                  : <var_declaration>
                        | <assignment_stmt>
                        | <aug_assignment_stmt>
                        | <if_stmt>
                        | <loop>
                        | <expr_stmt>
                        | <return_stmt>

<expr_stmt>             : <expr> <semicolon>

<assignment_stmt>       : <var> <assign> <expr> <semicolon>

<aug_assignment_stmt>   : <var> <aug_op> <expr> <semicolon>

<aug_op>                : (<plus_assign> | <minus_assign> | <mul_assign> | <div_assign> | <mod_assign>)

<list_access>           : <var> <l_square_bracket> <whole_number> <r_square_bracket>

<var>                   : <id>

<return_stmt>           : return <expr> <semicolon>

<if_stmt>               : if <dot> <condition> <dot> <then> (<dot> <else>)? <semicolon>

<condition>             : cond <lparen> <expr> ((and | or) <expr>)? <rparen>

<then>                  : then <lparen> <stmt_list> <rparen>

<else>                  : else <lparen> <stmt_list> <rparen>

<expr>                  : (<simple_expr> | <bool_expr>)

<bool_expr>             : <simple_expr> (<eq> | <lt> | <gt> | <lt_or_eq> | <gt_or_eq>) <simple_expr>

<simple_expr>           : <term> ((<plus> | <minus>) <term>)*

<term>                  : <factor> ((<mul> | <div>) <factor>)*

<factor>                : <plus> <factor>
                        | <minus> <factor>
                        | <plus_plus> <var>
                        | <minus_minus> <var>
                        | <int>
                        | <float>
                        | <boolean>
                        | <string>
                        | <lparen> <simple_expr> <rparen>
                        | <var>
                        | <func_call>
                        | <list_access>

<func_call>             : (<variable> <dot>)? <id> <dot> call <lparen> <arguments> <rparen> <semicolon>

<arguments>             : <empty>
                        | <expr> (<comma> <expr>)*

<loop>                  : loop <dot> <loop_init> <dot> <condition> <dot> <body> <semicolon>

<loop_init>             : init <lparen> (<var_declaration>)? <rparen>

<id>                    : <letter> (<letter> | <digit> | <underscore>)*

<underscore>            : _

<apostrophe>            : '

<semicolon>             : ;

<dot>                   : .

<assign>                : =

<coma>                  : ,

<type>                  : int
                        | flt
                        | str
                        | bool
                        | list

<plus>                  : +

<minus>                 : -

<mul>                   : *

<div>                   : /

<mod>                   : %

<int>                   : <sign> <whole_number>

<float>                 : <int_number> (<dot> <whole_number>)?

<whole_number>          : <digit> (<digit>)*

<digit>                 : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<sign>                  : empty
                        | <plus>
                        | <minus>

<string>                : <apostrophe> (<char>)* <apostrophe>

<char>                  : a | b | c | ... | z | A | B | C | ... | Z | . | , | ! | ? | : | ...

<boolean>               : true
                        | false

<l_square_bracket>      : [

<r_square_bracket>      : ]

<eq>                    : ==

<gt>                    : >

<lt>                    : <

<gt_or_eq>              : >=

<lt_or_eq>              : <=

<plus_assign>           : +=

<minus_assign>          : -=

<mul_assign>            : *=

<div_assign>            : /=

<mod_assign>            : %=

<plus_plus>             : ++

<minus_minus>           : --

<empty>                 :

